/*
 * This file is generated by jOOQ.
 */
package de.quinscape.domainql.testdomain.tables;


import de.quinscape.domainql.testdomain.Keys;
import de.quinscape.domainql.testdomain.Public;
import de.quinscape.domainql.testdomain.tables.records.TargetFourRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TargetFour extends TableImpl<TargetFourRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.target_four</code>
     */
    public static final TargetFour TARGET_FOUR = new TargetFour();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TargetFourRecord> getRecordType() {
        return TargetFourRecord.class;
    }

    /**
     * The column <code>public.target_four.id</code>.
     */
    public final TableField<TargetFourRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private TargetFour(Name alias, Table<TargetFourRecord> aliased) {
        this(alias, aliased, null);
    }

    private TargetFour(Name alias, Table<TargetFourRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.target_four</code> table reference
     */
    public TargetFour(String alias) {
        this(DSL.name(alias), TARGET_FOUR);
    }

    /**
     * Create an aliased <code>public.target_four</code> table reference
     */
    public TargetFour(Name alias) {
        this(alias, TARGET_FOUR);
    }

    /**
     * Create a <code>public.target_four</code> table reference
     */
    public TargetFour() {
        this(DSL.name("target_four"), null);
    }

    public <O extends Record> TargetFour(Table<O> child, ForeignKey<O, TargetFourRecord> key) {
        super(child, key, TARGET_FOUR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TargetFourRecord> getPrimaryKey() {
        return Keys.PK_TARGET_FOUR;
    }

    @Override
    public TargetFour as(String alias) {
        return new TargetFour(DSL.name(alias), this);
    }

    @Override
    public TargetFour as(Name alias) {
        return new TargetFour(alias, this);
    }

    @Override
    public TargetFour as(Table<?> alias) {
        return new TargetFour(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetFour rename(String name) {
        return new TargetFour(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetFour rename(Name name) {
        return new TargetFour(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetFour rename(Table<?> name) {
        return new TargetFour(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
