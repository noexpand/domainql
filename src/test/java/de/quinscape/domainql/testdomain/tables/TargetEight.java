/*
 * This file is generated by jOOQ.
*/
package de.quinscape.domainql.testdomain.tables;


import de.quinscape.domainql.testdomain.Indexes;
import de.quinscape.domainql.testdomain.Keys;
import de.quinscape.domainql.testdomain.Public;
import de.quinscape.domainql.testdomain.tables.records.TargetEightRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TargetEight extends TableImpl<TargetEightRecord> {

    private static final long serialVersionUID = -1781570270;

    /**
     * The reference instance of <code>public.target_eight</code>
     */
    public static final TargetEight TARGET_EIGHT = new TargetEight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TargetEightRecord> getRecordType() {
        return TargetEightRecord.class;
    }

    /**
     * The column <code>public.target_eight.id</code>.
     */
    public final TableField<TargetEightRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.target_eight.name</code>.
     */
    public final TableField<TargetEightRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.target_eight.num</code>.
     */
    public final TableField<TargetEightRecord, Integer> NUM = createField("num", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.target_eight</code> table reference
     */
    public TargetEight() {
        this(DSL.name("target_eight"), null);
    }

    /**
     * Create an aliased <code>public.target_eight</code> table reference
     */
    public TargetEight(String alias) {
        this(DSL.name(alias), TARGET_EIGHT);
    }

    /**
     * Create an aliased <code>public.target_eight</code> table reference
     */
    public TargetEight(Name alias) {
        this(alias, TARGET_EIGHT);
    }

    private TargetEight(Name alias, Table<TargetEightRecord> aliased) {
        this(alias, aliased, null);
    }

    private TargetEight(Name alias, Table<TargetEightRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_TARGET_EIGHT, Indexes.TARGET_EIGHT_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TargetEightRecord> getPrimaryKey() {
        return Keys.PK_TARGET_EIGHT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TargetEightRecord>> getKeys() {
        return Arrays.<UniqueKey<TargetEightRecord>>asList(Keys.PK_TARGET_EIGHT, Keys.TARGET_EIGHT_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TargetEight as(String alias) {
        return new TargetEight(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TargetEight as(Name alias) {
        return new TargetEight(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetEight rename(String name) {
        return new TargetEight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetEight rename(Name name) {
        return new TargetEight(name, null);
    }
}
