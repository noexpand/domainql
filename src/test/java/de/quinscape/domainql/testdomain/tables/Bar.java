/*
 * This file is generated by jOOQ.
*/
package de.quinscape.domainql.testdomain.tables;


import de.quinscape.domainql.testdomain.Indexes;
import de.quinscape.domainql.testdomain.Keys;
import de.quinscape.domainql.testdomain.Public;
import de.quinscape.domainql.testdomain.tables.records.BarRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bar extends TableImpl<BarRecord> {

    private static final long serialVersionUID = -1879636340;

    /**
     * The reference instance of <code>public.bar</code>
     */
    public static final Bar BAR = new Bar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BarRecord> getRecordType() {
        return BarRecord.class;
    }

    /**
     * The column <code>public.bar.id</code>.
     */
    public final TableField<BarRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bar.name</code>.
     */
    public final TableField<BarRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.bar.owner_id</code>.
     */
    public final TableField<BarRecord, String> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bar.description</code>.
     */
    public final TableField<BarRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.bar</code> table reference
     */
    public Bar() {
        this(DSL.name("bar"), null);
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(String alias) {
        this(DSL.name(alias), BAR);
    }

    /**
     * Create an aliased <code>public.bar</code> table reference
     */
    public Bar(Name alias) {
        this(alias, BAR);
    }

    private Bar(Name alias, Table<BarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bar(Name alias, Table<BarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_BAR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BarRecord> getPrimaryKey() {
        return Keys.PK_BAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BarRecord>> getKeys() {
        return Arrays.<UniqueKey<BarRecord>>asList(Keys.PK_BAR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BarRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BarRecord, ?>>asList(Keys.BAR__FK_BAR_OWNER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bar as(String alias) {
        return new Bar(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bar as(Name alias) {
        return new Bar(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(String name) {
        return new Bar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Name name) {
        return new Bar(name, null);
    }
}
