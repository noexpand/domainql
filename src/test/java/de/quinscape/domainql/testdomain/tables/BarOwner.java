/*
 * This file is generated by jOOQ.
 */
package de.quinscape.domainql.testdomain.tables;


import de.quinscape.domainql.testdomain.Keys;
import de.quinscape.domainql.testdomain.Public;
import de.quinscape.domainql.testdomain.tables.records.BarOwnerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BarOwner extends TableImpl<BarOwnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bar_owner</code>
     */
    public static final BarOwner BAR_OWNER = new BarOwner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BarOwnerRecord> getRecordType() {
        return BarOwnerRecord.class;
    }

    /**
     * The column <code>public.bar_owner.id</code>.
     */
    public final TableField<BarOwnerRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bar_owner.name</code>.
     */
    public final TableField<BarOwnerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.bar_owner.org_id</code>.
     */
    public final TableField<BarOwnerRecord, String> ORG_ID = createField(DSL.name("org_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private BarOwner(Name alias, Table<BarOwnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private BarOwner(Name alias, Table<BarOwnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bar_owner</code> table reference
     */
    public BarOwner(String alias) {
        this(DSL.name(alias), BAR_OWNER);
    }

    /**
     * Create an aliased <code>public.bar_owner</code> table reference
     */
    public BarOwner(Name alias) {
        this(alias, BAR_OWNER);
    }

    /**
     * Create a <code>public.bar_owner</code> table reference
     */
    public BarOwner() {
        this(DSL.name("bar_owner"), null);
    }

    public <O extends Record> BarOwner(Table<O> child, ForeignKey<O, BarOwnerRecord> key) {
        super(child, key, BAR_OWNER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BarOwnerRecord> getPrimaryKey() {
        return Keys.PK_BAR_OWNER;
    }

    @Override
    public List<ForeignKey<BarOwnerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BAR_OWNER__FK_BAR_OWNER_ORG_ID);
    }

    private transient BarOrg _barOrg;

    /**
     * Get the implicit join path to the <code>public.bar_org</code> table.
     */
    public BarOrg barOrg() {
        if (_barOrg == null)
            _barOrg = new BarOrg(this, Keys.BAR_OWNER__FK_BAR_OWNER_ORG_ID);

        return _barOrg;
    }

    @Override
    public BarOwner as(String alias) {
        return new BarOwner(DSL.name(alias), this);
    }

    @Override
    public BarOwner as(Name alias) {
        return new BarOwner(alias, this);
    }

    @Override
    public BarOwner as(Table<?> alias) {
        return new BarOwner(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BarOwner rename(String name) {
        return new BarOwner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BarOwner rename(Name name) {
        return new BarOwner(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BarOwner rename(Table<?> name) {
        return new BarOwner(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
