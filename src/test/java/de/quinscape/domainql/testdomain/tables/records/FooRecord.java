/*
 * This file is generated by jOOQ.
 */
package de.quinscape.domainql.testdomain.tables.records;


import de.quinscape.domainql.testdomain.tables.Foo;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "foo",
    schema = "public"
)
public class FooRecord extends UpdatableRecordImpl<FooRecord> implements Record4<String, String, Integer, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.foo.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.foo.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.foo.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.foo.name</code>.
     */
    @Column(name = "name", nullable = false, length = 100)
    @NotNull
    @Size(max = 100)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.foo.num</code>.
     */
    public void setNum(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.foo.num</code>.
     */
    @Column(name = "num", nullable = false)
    @NotNull
    public Integer getNum() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.foo.created</code>.
     */
    public void setCreated(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.foo.created</code>.
     */
    @Column(name = "created", nullable = false, precision = 6)
    @NotNull
    public Timestamp getCreated() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Integer, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Foo.FOO.ID;
    }

    @Override
    public Field<String> field2() {
        return Foo.FOO.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Foo.FOO.NUM;
    }

    @Override
    public Field<Timestamp> field4() {
        return Foo.FOO.CREATED;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getNum();
    }

    @Override
    public Timestamp component4() {
        return getCreated();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getNum();
    }

    @Override
    public Timestamp value4() {
        return getCreated();
    }

    @Override
    public FooRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public FooRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public FooRecord value3(Integer value) {
        setNum(value);
        return this;
    }

    @Override
    public FooRecord value4(Timestamp value) {
        setCreated(value);
        return this;
    }

    @Override
    public FooRecord values(String value1, String value2, Integer value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FooRecord
     */
    public FooRecord() {
        super(Foo.FOO);
    }

    /**
     * Create a detached, initialised FooRecord
     */
    public FooRecord(String id, String name, Integer num, Timestamp created) {
        super(Foo.FOO);

        setId(id);
        setName(name);
        setNum(num);
        setCreated(created);
    }

    /**
     * Create a detached, initialised FooRecord
     */
    public FooRecord(de.quinscape.domainql.testdomain.tables.pojos.Foo value) {
        super(Foo.FOO);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setNum(value.getNum());
            setCreated(value.getCreated());
        }
    }
}
